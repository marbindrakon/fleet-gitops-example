---
# Allocate internal VIPs from netbox and gather physical host data

- name: set node count facts
  ansible.builtin.set_fact:
    hybrid_controller_count: "{{ infra_env_hybrid_config['cluster_sizes'][cluster_size]['controller_count'] }}"
    hybrid_worker_count: "{{ infra_env_hybrid_config['cluster_sizes'][cluster_size]['worker_count'] }}"

- name: set is_sno fact true
  ansible.builtin.set_fact:
    is_sno: true
  when: hybrid_controller_count|int == 1

- name: set is_sno fact false
  ansible.builtin.set_fact:
    is_sno: false
  when: hybrid_controller_count|int > 1

- name: query existing internal VIPs
  ansible.builtin.set_fact:
    nb_existing_int_api_query: "{{ query('netbox.netbox.nb_lookup', 'ip-addresses', api_filter='description=' + cluster_name + '-Internal-API') | items2dict}}"
    nb_existing_int_ingress_query: "{{ query('netbox.netbox.nb_lookup', 'ip-addresses', api_filter='description=' + cluster_name + '-Internal-Ingress') | items2dict }}"
  when:
    - loadbalancer_type == "internal"

- name: set internal API VIP based on existing records
  ansible.builtin.set_fact:
    internal_api_vip: "{{ nb_existing_int_api_query.values() | map(attribute='address') | first | ansible.netcommon.ipaddr('address') }}"
    internal_api_cidr: "{{ nb_existing_int_api_query.values() | map(attribute='address') | first }}"
  when:
    - nb_existing_int_api_query is defined 
    - nb_existing_int_api_query | length > 0

- name: set internal ingress VIP based on existing records
  ansible.builtin.set_fact:
    internal_ingress_vip: "{{ nb_existing_int_ingress_query.values() | map(attribute='address') | first | ansible.netcommon.ipaddr('address') }}"
    internal_ingress_cidr: "{{ nb_existing_int_ingress_query.values() | map(attribute='address') | first }}"
  when:
    - nb_existing_int_ingress_query is defined 
    - nb_existing_int_ingress_query | length > 0

- name: allocate internal API VIP
  netbox.netbox.netbox_ip_address:
    netbox_url: "{{ lookup('env', 'NETBOX_URL') }}"
    netbox_token: "{{ lookup('env', 'NETBOX_TOKEN') }}"
    state: new
    data:
      prefix: "{{ infra_env_hybrid_config['vip_prefix'] }}"
      role: VIP
      dns_name: "api.{{ cluster_name }}.{{ base_domain }}"
      description: "{{ cluster_name }}-Internal-API"
  register: nb_internal_api_create
  when:
    - loadbalancer_type == "internal"
    - cluster_state == "present"
    - internal_api_vip is not defined
    - not is_sno

- name: set internal API VIP based on new record
  ansible.builtin.set_fact:
    internal_api_vip: "{{ nb_internal_api_create.ip_address.address | ansible.netcommon.ipaddr('address') }}"
    internal_api_cidr: "{{ nb_internal_api_create.ip_address.address }}"
  when:
    - internal_api_vip is not defined
    - nb_internal_api_create is defined
    - nb_internal_api_create.ip_address is defined

- name: allocate internal ingress VIP
  netbox.netbox.netbox_ip_address:
    netbox_url: "{{ lookup('env', 'NETBOX_URL') }}"
    netbox_token: "{{ lookup('env', 'NETBOX_TOKEN') }}"
    state: new
    data:
      prefix: "{{ infra_env_hybrid_config['vip_prefix'] }}"
      role: VIP
      dns_name: "apps.{{ cluster_name }}.{{ base_domain }}"
      description: "{{ cluster_name }}-Internal-Ingress"
  register: nb_internal_ingress_create
  when:
    - loadbalancer_type == "internal"
    - cluster_state == "present"
    - internal_ingress_vip is not defined
    - not is_sno

- name: set internal ingress VIP based on new record
  set_fact:
    internal_ingress_vip: "{{ nb_internal_ingress_create.ip_address.address | ansible.netcommon.ipaddr('address') }}"
    internal_api_cidr: "{{ nb_internal_api_create.ip_address.address }}"
  when:
    - internal_ingress_vip is not defined 
    - nb_internal_ingress_create is defined
    - nb_internal_ingress_create.ip_address is defined

- name: deallocate internal API VIP
  netbox.netbox.netbox_ip_address:
    netbox_url: "{{ lookup('env', 'NETBOX_URL') }}"
    netbox_token: "{{ lookup('env', 'NETBOX_TOKEN') }}"
    state: absent
    data:
      address: "{{ internal_api_cidr }}"
  register: nb_internal_api_create
  when:
    - loadbalancer_type == "internal"
    - cluster_state == "absent"
    - internal_api_vip is defined

- name: deallocate internal ingress VIP
  netbox.netbox.netbox_ip_address:
    netbox_url: "{{ lookup('env', 'NETBOX_URL') }}"
    netbox_token: "{{ lookup('env', 'NETBOX_TOKEN') }}"
    state: absent
    data:
      address: "{{ internal_ingress_cidr }}"
  register: nb_internal_ingress_create
  when:
    - loadbalancer_type == "internal"
    - cluster_state == "absent"
    - internal_ingress_vip is defined

### Allocate hosts (vmware NYI)

- name: construct cluster netbox tag name
  ansible.builtin.set_fact:
    nb_cluster_tag: "{{ infra_env_hybrid_config['netbox_cluster_tag_prefix'] }}{{ cluster_name }}"

- name: query available hosts from netbox
  ansible.builtin.set_fact:
    nb_avail_hosts_query: "{{ query('netbox.netbox.nb_lookup', 'devices', api_filter='status=staged tag=' + infra_env_hybrid_config['netbox_pool_tag']) | items2dict}}"
  when: cluster_state == "present"

- name: query current hosts from netbox
  ansible.builtin.set_fact:
    nb_current_hosts_query: "{{ query('netbox.netbox.nb_lookup', 'devices', api_filter='tag=' + nb_cluster_tag) | items2dict}}"
  when: cluster_state == "absent"

- name: deallocate nodes
  netbox.netbox.netbox_device:
    netbox_url: "{{ lookup('env', 'NETBOX_URL') }}"
    netbox_token: "{{ lookup('env', 'NETBOX_TOKEN') }}"
    state: present
    data:
      name: "{{ item }}"
      state: active
      tags:
        - "{{ infra_env_hybrid_config['netbox_pool_tag'] }}"
  loop: "{{ nb_current_hosts_query.values() | map(attribute=name) }}"
  when: cluster_state == "absent" 

- name: ensure final tag state
  netbox.netbox.netbox_tag:
    netbox_url: "{{ lookup('env', 'NETBOX_URL') }}"
    netbox_token: "{{ lookup('env', 'NETBOX_TOKEN') }}"
    state: "{{ cluster_state }}"
    data:
      name: "{{ nb_cluster_tag }}"

- name: ensure role tags exist
  netbox.netbox.netbox_tag:
    netbox_url: "{{ lookup('env', 'NETBOX_URL') }}"
    netbox_token: "{{ lookup('env', 'NETBOX_TOKEN') }}"
    state: present
    data:
      name: "{{ item }}"
  loop:
    - ocp-control-plane
    - ocp-worker

- name: initialize physical host lists
  ansible.builtin.set_fact:
    physical_controller_nb_hosts: []
    physical_worker_nb_hosts: []

